// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getApiRoutes = `-- name: GetApiRoutes :many
SELECT id, path, method
FROM routes 
WHERE api_id = $1
`

type GetApiRoutesRow struct {
	ID     uuid.UUID
	Path   string
	Method string
}

func (q *Queries) GetApiRoutes(ctx context.Context, apiID uuid.UUID) ([]GetApiRoutesRow, error) {
	rows, err := q.db.Query(ctx, getApiRoutes, apiID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetApiRoutesRow
	for rows.Next() {
		var i GetApiRoutesRow
		if err := rows.Scan(&i.ID, &i.Path, &i.Method); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getApis = `-- name: GetApis :many
SELECT id, url
FROM apis
`

func (q *Queries) GetApis(ctx context.Context) ([]Api, error) {
	rows, err := q.db.Query(ctx, getApis)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Api
	for rows.Next() {
		var i Api
		if err := rows.Scan(&i.ID, &i.Url); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClientGroups = `-- name: GetClientGroups :many
SELECT groups.id
FROM group_clients_association as gca
JOIN groups
  ON groups.id = gca.group_id
WHERE gca.client_id = $1
`

func (q *Queries) GetClientGroups(ctx context.Context, clientID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getClientGroups, clientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClients = `-- name: GetClients :many
SELECT id
FROM clients
`

func (q *Queries) GetClients(ctx context.Context) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRouteClients = `-- name: GetRouteClients :many
SELECT clients.id 
FROM routes_association AS ra 
JOIN clients
  ON ra.client_id = clients.id 
WHERE ra.route_id = $1
`

func (q *Queries) GetRouteClients(ctx context.Context, routeID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getRouteClients, routeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRouteGroups = `-- name: GetRouteGroups :many
SELECT groups.id
FROM group_routes_association AS gra
JOIN groups
  ON gra.group_id = groups.id
WHERE gra.route_id = $1
`

func (q *Queries) GetRouteGroups(ctx context.Context, routeID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getRouteGroups, routeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var id uuid.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
